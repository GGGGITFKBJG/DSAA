顺序表
1. 插入, 自动调整空间
2. 逆序
3. 删除重复元素
4. (1) 重排使左边奇数, 右边偶数; (2) 不改变先后次序, 两种解法(空间优先、时间优先)
5. 两个数组求交集

单链表
1. 创建, 插入, 删除, 销毁
2. 在有序链表内插入，保持有序
3. 两个有序链表归并，保持有序
4. 链表逆序
5. 寻找倒数第K个元素

循环链表
1. 创建、插入、删除、销毁
2. 约瑟夫环问题(循环数组实现、链表实现、递归实现)
3. 判断链表是否有环
3.1. 寻找有环链表的入口结点(https://blog.csdn.net/puss0/article/details/78462375)

双向链表
1. 插入、删除

队列与栈
1. 队列的初始化(链表实现), 入队, 出队
2. 栈的初始化(动态数组实现), 入栈, 出栈
--> 3. 给定入栈序列, 判断另一序列是否可能为合法的出栈序列(https://blog.csdn.net/qq_41377679/article/details/79889402)
--> 4. 给定入栈序列, 求所有可能的出栈序列
5. 二-八进制转换
6. 括号匹配问题 
7. 两个栈实现一个队列

树
1. 概念:
1.1 结点的深度(根为0), 高度; 树的层数, 深度, 高度
1.2 度为k, 深为h的满树结点数为 (k^h - 1) / (k - 1)
1.3 概念: 二叉树; 完美二叉树(满二叉树), 完全二叉树, 完满二叉树
1.4 满二叉树第i层结点数为 2^(i - 1), 任意二叉树n0 = n2 + 1
1.5 深为h的二叉树至多有 2^h - 1个节点(满二叉树)
1.6 结点数为n的完全二叉树, 深度为 [log2(n)] + 1, []表示向下取整
2. 二叉树的创建, 销毁, 遍历(先序, 中序, 后序, 按层次)
3. 已知先序和中序序列, 求后序序列和按层次遍历序列
4. 计算二叉树的深度(高度)
5. 计算二叉树的叶结点数
6. 计算二叉树包含key的结点的层数
7. 二叉排序树最低公共祖先问题

图
1. 图的创建, 遍历(DFS, BFS)

排序
1. 插入排序
2. 选择排序
3. 冒泡排序
4. 希尔排序
5. 快速排序
